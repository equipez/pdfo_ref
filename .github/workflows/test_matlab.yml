name: Test MATLAB

on:
  # Trigger the workflow on push or pull request
  #push:
  #pull_request:  # DANGEROUS! MUST be disabled for self-hosted runners!
  # Trigger the workflow by cron. The default time zone of GitHub Actions is UTC.
  schedule:
    - cron: '0 1, * * *'
  # Trigger the workflow when it is manually triggered
  workflow_dispatch:

env:
  MATLAB_RELEASE: latest
  MACOS_FORTRAN_COMPONENTS: intel.oneapi.mac.ifort-compiler
  WINDOWS_FORTRAN_COMPONENTS: intel.oneapi.win.ifort-compiler
  # The following version specifications work for MATLAB 2022b. Do not change they until they stop working.
  # See https://github.com/matlab-actions/setup-matlab/issues/29#issuecomment-1048390901
  # https://www.mathworks.com/support/requirements/supported-compilers.html
  # https://github.com/zequipe/test_matlab/actions/workflows/test_compiler.yml
  # For Linux
  GFORTRAN_VERSION: 11
  # For macOS
  MACOS_HPCKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/18341/m_HPCKit_p_2022.1.0.86_offline.dmg
  # For Windows 2019
  WINDOWS_BASEKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/18497/w_BaseKit_p_2022.1.2.154_offline.exe
  WINDOWS_HPCKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/18529/w_HPCKit_p_2022.1.2.116_offline.exe

jobs:
  test:
    name: Test MATLAB
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-2019]   # MEX Fortran does not work on windows-latest yet
        bitness: [32, 64]

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: prepare for cache restore for Intel oneAPI on macOS
        if: matrix.os == 'macos-latest'
        run: |
          sudo mkdir -p /opt/intel
          sudo chown $USER /opt/intel
      - name: cache install Intel oneAPI on macOS
        if: matrix.os == 'macos-latest'
        id: cache-install-macos
        uses: actions/cache@v3
        with:
          path: /opt/intel/oneapi
          key: install-${{ env.MACOS_HPCKIT_URL }}-${{ env.MACOS_FORTRAN_COMPONENTS }}
      - name: install Intel oneAPI on macOS
        if: matrix.os == 'macos-latest' && steps.cache-install-macos.outputs.cache-hit != 'true'
        run: bash .github/scripts/install_oneapi_macos.sh $MACOS_HPCKIT_URL $MACOS_FORTRAN_COMPONENTS
      - name: Run intelvas_macos.sh on macOS
        if: matrix.os == 'macos-latest'
        run: |
            bash .github/scripts/intelvars_macos.sh


      - name: cache install Intel oneAPI on Windows
        if: startsWith(matrix.os, 'windows')
        id: cache-install-windows
        uses: actions/cache@v3
        with:
          path: C:\Program Files (x86)\Intel\oneAPI\compiler
          key: install-${{ env.WINDOWS_HPCKIT_URL }}-${{ env.WINDOWS_FORTRAN_COMPONENTS }}-compiler-${{ hashFiles('**/.github/scripts/cache_exclude_oneapi_windows.sh') }}
      - name: install Intel oneAPI on Windows
        if: startsWith(matrix.os, 'windows') && steps.cache-install-windows.outputs.cache-hit != 'true'
        shell: bash
        run: .github/scripts/install_oneapi_windows.bat $WINDOWS_HPCKIT_URL $WINDOWS_FORTRAN_COMPONENTS
      - name: exclude unused files from cache for Intel oneAPI on Windows
        if: startsWith(matrix.os, 'windows') && steps.cache-install-windows.outputs.cache-hit != 'true'
        shell: bash
        run: .github/scripts/cache_exclude_oneapi_windows.sh
      - name: Run intelvars_windows.bat
        if: startsWith(matrix.os, 'windows')
        run: |
          cmd.exe "/K" '".github/scripts/intelvars_windows.bat" && powershell'

      - name: Link gfortran for MATLAB on Linux
        if: startsWith(matrix.os, 'ubuntu')
        run: sudo bash .github/scripts/link_gfortran_for_matlab ${{ env.GFORTRAN_VERSION }}

      - name: Set up MATLAB
        uses: matlab-actions/setup-matlab@v1.2.3
        with:
          release: ${{ env.MATLAB_RELEASE }}

      - name: Run script
        uses: matlab-actions/run-command@v1.1.2
        with:
          command: |
              ver;
              root_dir = pwd();
              cd(fullfile(root_dir));
              options = struct();
              options.debug=true;
              setup(options);
              testprima;
              setup
              setup path
              testprima;
              setup cobyla
              setup uobyqa
              setup newuoa
              setup bobyqa
              setup lincoa
              setup path
              setup clean
              setup path
              setup uninstall
              setup path
              setup uninstall
              cd(fullfile(root_dir, 'matlab', 'tests')); pdv
