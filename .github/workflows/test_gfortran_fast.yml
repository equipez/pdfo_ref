name: Test gfortran, -fast

on:
  # Trigger the workflow on push or pull request
  #push:
  pull_request:  # DANGEROUS! MUST be disabled for self-hosted runners!
  # Trigger the workflow by cron. The default time zone of GitHub Actions is UTC.
  schedule:
    - cron: '0 16 4-31/4 * *'
  # Trigger the workflow manually
  workflow_dispatch:
    inputs:
      git-ref:
        description: Git Ref (Optional)
        required: false

# Show the git ref in the workflow name if it is invoked manually.
run-name: ${{ github.event_name == 'workflow_dispatch' && format('Manual run {0}', inputs.git-ref) || '' }}


jobs:

  test:
    name: Run gfortran tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        compiler: [gcc]
        version: [11, 13] # gfortran 9 is buggy wit logical variables when invoked with -Ofast
        ikind: [i2, i8]
        solver: [newuoa, cobyla, lincoa, bobyqa, uobyqa]
        testdim: [small]
        exclude:
          - os: windows-latest
            version: 13  # gfortran-13 is not available on Windows as of 20230904
    # run scheduled workflows only in central repository
    if: ${{ (github.event_name != 'schedule') || ((github.event_name == 'schedule') && (github.repository == 'libprima/prima)) }}

    steps:

      - name: Clone Repository (Latest)
        uses: actions/checkout@v4
        if: github.event.inputs.git-ref == ''
        with:
          submodules: recursive
        #   ssh-key: ${{ secrets.SSH_PRIVATE_KEY_ACT }} # This forces checkout to use SSH, not HTTPS
        # As of 230425, checkout with ssh fails frequently on Windows runners.
      - name: Clone Repository (Custom Ref)
        uses: actions/checkout@v4
        if: github.event.inputs.git-ref != ''
        with:
          ref: ${{ github.event.inputs.git-ref }}
          submodules: recursive
        #   ssh-key: ${{ secrets.SSH_PRIVATE_KEY_ACT }} # This forces checkout to use SSH, not HTTPS
        # As of 230425, checkout with ssh fails frequently on Windows runners.

      - name: Setup Fortran
        id: setup_fortran
        uses: awvwgk/setup-fortran@main
        with:
          compiler: ${{ matrix.compiler }}
          version: ${{ matrix.version }}

      - name: Check Fortran compiler
        run: |
          ${{ env.FC }} --version
          ${{ env.CC }} --version
        shell: bash
        env:
          FC: ${{ steps.setup_fortran.outputs.fc }}
          CC: ${{ steps.setup_fortran.outputs.cc }}

      - name: Make tools such as grep, make, and git available on Windows
        if: runner.os == 'Windows'
        run: $env:Path += ";C:\Program Files\Git\usr\bin;C:\Program Files\Git\bin;C:\ProgramData\Chocolatey\bin"

      - name: Miscellaneous setup
        shell: bash  # Important; otherwise, the following statements do not work on Windows.
        run: bash .github/scripts/misc_setup

      - name: Conduct the test
        shell: bash  # Important; otherwise, `<` will not work on Windows.
        # Not sure whether the Makefile has bugs, but on Windows the making of gtest always invokes
        # the making of gtest_c twice even if the former is up to date after the first making. It
        # may lead to errors due to parallel making. To avoid this, we make gtest_c first.
        run: |
            # 20221212: We skip the linting and extensive test on Windows due to the following
            # reasons. The example will still be tested on Windows.
            # 1. Windows does not support the symlink of linux, and hence mlint and flint do not work.
            # 2. Makefile.common does not work on Windows for the moment due to quotation marks.
            if [[ "$RUNNER_OS" != "Windows" ]] ; then
                cd "$ROOT_DIR"/fortran/${{ matrix.solver }} && bash ./flint --all && bash ./mlint --all
                export TESTDIM=${{ matrix.testdim }}
                export FFLAGS='-fast'
                cd "$ROOT_DIR"/fortran/tests && make gtest_${{ matrix.ikind }}_c.${{ matrix.solver }} && make gtest_${{ matrix.ikind }}.${{ matrix.solver }}
            fi
            cd "$ROOT_DIR"/fortran/examples/${{ matrix.solver }} && make gtest

      - name: Store artifacts
        uses: actions/upload-artifact@v3.1.3
        if: always()  # Always run even if the workflow is canceled manually or due to overtime.
        # Note that `$TEST_DIR` does not work on Windows, where its equivalent is `$env:TEST_DIR`.
        # In the following, we enquire `$TEST_DIR` by using the `env` context, which is platform independent.
        with:
          path: ${{ env.TEST_DIR }}/prima/fortran/tests/test.${{ matrix.solver }}/log/*.log

      - name: Remove the test data
        if: always()  # Always run even if the workflow is canceled manually or due to overtime.
        shell: bash  # Important; otherwise, `rm -rf` will not work on Windows.
        run: rm -rf ${{ env.TEST_DIR }}
