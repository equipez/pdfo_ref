name: Test ifx

on:
  # Trigger the workflow on push or pull request
  #push:
  #pull_request:  # DANGEROUS! MUST be disabled for self-hosted runners!
  # Trigger the workflow by cron. The default time zone of GitHub Actions is UTC.
  schedule:
    - cron: '0 18 2-31/2 * *'
  # Trigger the workflow when it is manually triggered
  workflow_dispatch:


jobs:
  # check_date:
  #   runs-on: ubuntu-latest
  #   name: Check latest commit
  #   outputs:
  #     has_recent_commit: ${{ steps.has_recent_commit.outputs.has_recent_commit }}

  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: print latest_commit
  #       run: echo ${{ github.sha }}
  #     - id: has_recent_commit
  #       continue-on-error: true
  #       name: check whether the last commit is sufficiently recent
  #       if: ${{ github.event_name == 'schedule' }}
  #       run: if [[ -n $(git rev-list  --after="6 hours"  ${{ github.sha }}) ]] ; then echo "::set-output name=has_recent_commit::true"; fi


  test:
    name: Run ifx tests
    #needs: check_date
    #if: ${{ github.event_name != 'schedule' || needs.check_date.outputs.has_recent_commit == 'true' }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]  # As of 202301, ifx is not available on macOS
        ikind: [i2]
        solver: [newuoa, cobyla, lincoa, bobyqa, uobyqa]
        fflags: [-O1, -O2, -O3, -g, -fast]
        testdim: [small, big]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Make sed available on Windows
        if: runner.os == 'Windows'
        run: $env:Path += ";C:\Program Files\Git\usr\bin"

      - name: Install Intel oneAPI on Linux
        if: startsWith(matrix.os, 'ubuntu')
        run: sudo .github/scripts/install_oneapi_linux.sh

      - name: Install Intel oneAPI on Windows
        if: startsWith(matrix.os, 'windows')
        shell: bash
        run: .github/scripts/install_oneapi_windows.bat
        #run: cmd.exe "/K" '".github\scripts\install_oneapi_windows.bat"'

      - name: Set environment variables
        shell: bash  # Important; otherwise, the following statements do not work on Windows.
        run: |
          TEST_DIR=/tmp/gittest_"$(date +%s)"_"$((RANDOM*RANDOM))"  # Needed in the Makefiles
          echo "TEST_DIR=$TEST_DIR" >> $GITHUB_ENV  # Make the environment variable available in subsequent steps
          echo "$TEST_DIR"

      - name: Conduct the test
        shell: bash
        run: |
          if [[ "$RUNNER_OS" = "Windows" ]]; then
              "C:\Program Files (x86)\Intel\oneAPI\setvars.bat"
          else
              source /opt/intel/oneapi/setvars.sh
          fi
          ROOT="$(cd "$(dirname "./")"; pwd -P)/$(basename "./")"
          # 20221212: We skip the linting and extensive test on Windows due to the following
          # reasons. The example will still be tested on Windows.
          # 1. Windows does not support the symlink of linux, and hence mlint and flint do not work.
          # 2. Makefile.common does not work on Windows for the moment due to quotation marks.
          if [[ "$RUNNER_OS" != "Windows" ]]; then
              cd "$ROOT"/fortran/${{ matrix.solver }} && bash ./flint --all && bash ./mlint --all
              cd $ROOT/fortran/tests
              sed -i 's|800|400|g' test_*.f90
              export FFLAGS=${{ matrix.fflags }} && export TESTDIM=${{ matrix.testdim }} && make xtest_${{ matrix.ikind }}.${{ matrix.solver }}
          fi
          cd $ROOT/fortran/examples/${{ matrix.solver }} && make xtest

      - name: Store artifacts
        uses: actions/upload-artifact@v3
        with:
          path: ${{ env.TEST_DIR }}/prima/fortran/tests/test.${{ matrix.solver }}/log/*.log

      - name: Remove the test data
        run:
          rm -rf ${{ env.TEST_DIR }}
