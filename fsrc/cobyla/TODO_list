! TODO:

! Write a note on the algorithm of trstlp. Rewrite the subroutine using the language of QR
! facorization. Rewrite the VMD function. See the comments in trustregion.f90.
!---------------------------------------------------------------------------!
!-- QUESTION: What are exactly the objective and algorithm of trstlp_sub? --!
! The algorithm was NOT documented in the COBYLA paper. A note should be
! written to introduce it!
! As a major part of the algorithm, the code maintains and updates the QR
! factorization of A(IACT(1:NACT)), i.e., the gradients of all the active
! (linear) constraints. The matrix Z is indeed Q, and the vector ZDOTA
! is the diagonal of R. The factorization is updated by Givens rotations when
! an index is added in or removed from IACT.
!---------------------------------------------------------------------------!
!
! BTW, write a projection function to be used in TRSAPP, BIGLAG, BIGDEN in NEWUOA. See lines 305-306
! of trustregion.f90 and 391-392, 675-676 of geometry.f90 of NEWUOA.
!
! HYPOT is used  in trustregion.f90 for updating ZDOTA. A robust version should be written (avoid
! under/overflow in particular). This version may also be used in PLANEROT. This has been done
! previously, but it
! worsened a bit the performance of NEWUOA so it was discarded. Find it back, and test NEWUOA again.
!
! 1. Shouldn't we remove the extreme barrier in the MATLAB/Python interface after it is
!    implemented in FORTRAN?
! 3. merge UPDATEPOLE and UPDATEXFC
! 6. Do the same for NEWUOA
! 11.
! Enforcing programming contracts
! Programming can be thought of as requirements for correct execution of a procedure and assurances
! for the result of correct execution. The requirements and assurances might be constraints of three
! kinds:
! Preconditions (requirements): logical expressions that must evaluate to .true. when a procedure starts execution,
! Postconditions (assurances): expressions that must evaluate to .true. when a procedure finishes execution, and
! Invariants: universal pre- and postconditions that must always be true when all procedures in a class start or finish executing.
