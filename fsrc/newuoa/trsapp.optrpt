Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 19.0.4.243 Build 20190416

Compiler options: -c -qopt-report=5 -qopt-report-phase=vec

Begin optimization report for: TRSAPP

    Report from: Vector optimizations [vec]


LOOP BEGIN at trsapp.f(56,7)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at trsapp.f(56,7)
      remark #15389: vectorization support: reference s(:) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.300
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 2.500 
      remark #15478: estimated potential speedup: 1.450 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at trsapp.f(56,7)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at trsapp.f(63,7)
   remark #15388: vectorization support: reference g(:) has aligned access
   remark #15389: vectorization support: reference gq(:) has unaligned access
   remark #15388: vectorization support: reference hx(:) has aligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.125
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 1.960 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at trsapp.f(63,7)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference g(:) has aligned access
   remark #15389: vectorization support: reference gq(:) has unaligned access
   remark #15388: vectorization support: reference hx(:) has aligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.083
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 1.960 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at trsapp.f(66,7)
   remark #15388: vectorization support: reference d(:) has aligned access
   remark #15388: vectorization support: reference g(:) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 2.000 
   remark #15478: estimated potential speedup: 2.450 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at trsapp.f(66,7)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference d(:) has aligned access
   remark #15388: vectorization support: reference g(:) has aligned access
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.250
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 2.000 
   remark #15478: estimated potential speedup: 2.450 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at trsapp.f(70,7)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at trsapp.f(70,7)
      remark #15388: vectorization support: reference hs(:) has aligned access
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 2.660 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at trsapp.f(70,7)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at trsapp.f(120,11)
   remark #15389: vectorization support: reference s(:) has unaligned access
   remark #15389: vectorization support: reference s(:) has unaligned access
   remark #15388: vectorization support: reference d(:) has aligned access   [ trsapp.f(120,19) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.182
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 9 
   remark #15477: vector cost: 5.500 
   remark #15478: estimated potential speedup: 1.610 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at trsapp.f(120,11)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference s(:) has unaligned access
   remark #15389: vectorization support: reference s(:) has unaligned access
   remark #15388: vectorization support: reference d(:) has aligned access   [ trsapp.f(120,19) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.059
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 9 
   remark #15477: vector cost: 5.500 
   remark #15478: estimated potential speedup: 1.610 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at trsapp.f(122,11)
   remark #15388: vectorization support: reference hs(:) has aligned access
   remark #15388: vectorization support: reference hs(:) has aligned access
   remark #15388: vectorization support: reference hd(:) has aligned access   [ trsapp.f(122,21) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.062
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 9 
   remark #15477: vector cost: 4.000 
   remark #15478: estimated potential speedup: 2.200 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at trsapp.f(122,11)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference hs(:) has aligned access
   remark #15388: vectorization support: reference hs(:) has aligned access
   remark #15388: vectorization support: reference hd(:) has aligned access   [ trsapp.f(122,21) ]
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.857
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 9 
   remark #15477: vector cost: 4.000 
   remark #15478: estimated potential speedup: 2.200 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at trsapp.f(124,16)
   remark #15388: vectorization support: reference at (124:29) has aligned access   [ trsapp.f(124,29) ]
   remark #15388: vectorization support: reference g(:) has aligned access
   remark #15388: vectorization support: reference hs(:) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 2.350 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at trsapp.f(124,16)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference at (124:29) has aligned access   [ trsapp.f(124,29) ]
   remark #15388: vectorization support: reference g(:) has aligned access
   remark #15388: vectorization support: reference hs(:) has aligned access
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.909
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 2.350 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at trsapp.f(124,16)
   remark #15388: vectorization support: reference at (124:35) has aligned access   [ trsapp.f(124,35) ]
   remark #15388: vectorization support: reference g(:) has aligned access
   remark #15388: vectorization support: reference hs(:) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 2.350 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at trsapp.f(124,16)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference at (124:35) has aligned access   [ trsapp.f(124,35) ]
   remark #15388: vectorization support: reference g(:) has aligned access
   remark #15388: vectorization support: reference hs(:) has aligned access
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.909
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 2.350 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at trsapp.f(143,11)
   remark #15388: vectorization support: reference d(:) has aligned access
   remark #15388: vectorization support: reference d(:) has aligned access   [ trsapp.f(143,18) ]
   remark #15388: vectorization support: reference g(:) has aligned access   [ trsapp.f(143,26) ]
   remark #15388: vectorization support: reference hs(:) has aligned access   [ trsapp.f(143,29) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.050
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 3 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 38 
   remark #15477: vector cost: 5.000 
   remark #15478: estimated potential speedup: 6.970 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at trsapp.f(143,11)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference d(:) has aligned access
   remark #15388: vectorization support: reference d(:) has aligned access   [ trsapp.f(143,18) ]
   remark #15388: vectorization support: reference g(:) has aligned access   [ trsapp.f(143,26) ]
   remark #15388: vectorization support: reference hs(:) has aligned access   [ trsapp.f(143,29) ]
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.667
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 3 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 38 
   remark #15477: vector cost: 5.000 
   remark #15478: estimated potential speedup: 6.970 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at trsapp.f(143,11)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at trsapp.f(183,11)
   remark #15388: vectorization support: reference d(:) has aligned access
   remark #15388: vectorization support: reference g(:) has aligned access   [ trsapp.f(183,21) ]
   remark #15388: vectorization support: reference hs(:) has aligned access   [ trsapp.f(183,21) ]
   remark #15389: vectorization support: reference s(:) has unaligned access   [ trsapp.f(183,43) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.125
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 67 
   remark #15477: vector cost: 7.000 
   remark #15478: estimated potential speedup: 8.560 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at trsapp.f(183,11)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference d(:) has aligned access
   remark #15388: vectorization support: reference g(:) has aligned access   [ trsapp.f(183,21) ]
   remark #15388: vectorization support: reference hs(:) has aligned access   [ trsapp.f(183,21) ]
   remark #15389: vectorization support: reference s(:) has unaligned access   [ trsapp.f(183,43) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.773
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 67 
   remark #15477: vector cost: 7.000 
   remark #15478: estimated potential speedup: 8.560 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at trsapp.f(183,11)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at trsapp.f(197,11)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between qmin (202:24) and qmin (203:19)
   remark #15346: vector dependence: assumed FLOW dependence between qmin (203:19) and qmin (202:24)
   remark #15346: vector dependence: assumed ANTI dependence between qmin (202:24) and qmin (203:19)
LOOP END

LOOP BEGIN at trsapp.f(230,11)
   remark #15389: vectorization support: reference s(:) has unaligned access
   remark #15389: vectorization support: reference s(:) has unaligned access   [ trsapp.f(230,15) ]
   remark #15388: vectorization support: reference d(:) has aligned access   [ trsapp.f(230,23) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.179
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 11 
   remark #15477: vector cost: 7.000 
   remark #15478: estimated potential speedup: 1.550 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at trsapp.f(230,11)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference s(:) has unaligned access
   remark #15389: vectorization support: reference s(:) has unaligned access   [ trsapp.f(230,15) ]
   remark #15388: vectorization support: reference d(:) has aligned access   [ trsapp.f(230,23) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 11 
   remark #15477: vector cost: 7.000 
   remark #15478: estimated potential speedup: 1.550 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at trsapp.f(231,11)
   remark #15388: vectorization support: reference hs(:) has aligned access
   remark #15388: vectorization support: reference hs(:) has aligned access   [ trsapp.f(231,16) ]
   remark #15388: vectorization support: reference hd(:) has aligned access   [ trsapp.f(231,25) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.091
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 11 
   remark #15477: vector cost: 5.500 
   remark #15478: estimated potential speedup: 1.960 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at trsapp.f(231,11)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference hs(:) has aligned access
   remark #15388: vectorization support: reference hs(:) has aligned access   [ trsapp.f(231,16) ]
   remark #15388: vectorization support: reference hd(:) has aligned access   [ trsapp.f(231,25) ]
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.824
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 11 
   remark #15477: vector cost: 5.500 
   remark #15478: estimated potential speedup: 1.960 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at trsapp.f(232,16)
   remark #15388: vectorization support: reference at (232:29) has aligned access   [ trsapp.f(232,29) ]
   remark #15388: vectorization support: reference g(:) has aligned access
   remark #15388: vectorization support: reference hs(:) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 2.350 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at trsapp.f(232,16)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference at (232:29) has aligned access   [ trsapp.f(232,29) ]
   remark #15388: vectorization support: reference g(:) has aligned access
   remark #15388: vectorization support: reference hs(:) has aligned access
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.909
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 2.350 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at trsapp.f(232,16)
   remark #15388: vectorization support: reference at (232:35) has aligned access   [ trsapp.f(232,35) ]
   remark #15388: vectorization support: reference g(:) has aligned access
   remark #15388: vectorization support: reference hs(:) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 2.350 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at trsapp.f(232,16)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference at (232:35) has aligned access   [ trsapp.f(232,35) ]
   remark #15388: vectorization support: reference g(:) has aligned access
   remark #15388: vectorization support: reference hs(:) has aligned access
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.909
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 2.350 
   remark #15488: --- end vector cost summary ---
LOOP END


Non-optimizable loops:


LOOP BEGIN at trsapp.f(151,7)
   remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at trsapp.f(238,7)
   remark #15532: loop was not vectorized: compile time constraints prevent loop optimization. Consider using -O3.
LOOP END
===========================================================================

Begin optimization report for: TRSAPP:HESSMUL

    Report from: Vector optimizations [vec]


LOOP BEGIN at trsapp.f(268,12)
   remark #15388: vectorization support: reference at (268:21) has aligned access   [ trsapp.f(268,21) ]
   remark #15389: vectorization support: reference pq(:) has unaligned access
   remark #15388: vectorization support: reference at (268:12) has aligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.107
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 1.690 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at trsapp.f(268,12)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference at (268:21) has aligned access   [ trsapp.f(268,21) ]
   remark #15389: vectorization support: reference pq(:) has unaligned access
   remark #15388: vectorization support: reference at (268:12) has aligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 1.690 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at trsapp.f(271,7)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at trsapp.f(272,10)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between hd(j) (275:18) and hd(j) (275:18)
      remark #15346: vector dependence: assumed ANTI dependence between hd(j) (275:18) and hd(j) (275:18)
   LOOP END

   LOOP BEGIN at trsapp.f(272,10)
   <Remainder>
   LOOP END
LOOP END
===========================================================================
