# Please change the variables FC and FFLAGS to match your fortran compiler

FC = gfortran
FFLAGS = -g
COMMON = ../common

# The .F90 and .f90 files will be compiled in the enumeration order of
# that the .o files. The order matters, because the compilation of 
# each .o file depends on the .o files before it.

example: example.f90 \
	consts.o info.o debug.o memory.o infnan.o lina.o output.o pintrf.o \
	preproc.o initialize.o trustregion.o vlagbeta.o geometry.o shiftbase.o update.o newuob.o newuoa.o 
	$(FC) $(FFLAGS) -o example example.f90 *.o

test: example
	./example 
 
consts.o: $(COMMON)/consts.F90
	$(FC) $(FFLAGS) -c $(COMMON)/consts.F90
info.o: $(COMMON)/info.F90
	$(FC) $(FFLAGS) -c $(COMMON)/info.F90
debug.o: $(COMMON)/debug.F90
	$(FC) $(FFLAGS) -c $(COMMON)/debug.F90
memory.o: $(COMMON)/memory.F90
	$(FC) $(FFLAGS) -c $(COMMON)/memory.F90
infnan.o: $(COMMON)/infnan.F90
	$(FC) $(FFLAGS) -c $(COMMON)/infnan.F90
lina.o: $(COMMON)/lina.F90
	$(FC) $(FFLAGS) -c $(COMMON)/lina.F90
output.o: $(COMMON)/output.F90
	$(FC) $(FFLAGS) -c $(COMMON)/output.F90
pintrf.o: $(COMMON)/pintrf.F90
	$(FC) $(FFLAGS) -c $(COMMON)/pintrf.F90

preproc.o: preproc.f90
	$(FC) $(FFLAGS) -c preproc.f90
initialize.o: initialize.f90
	$(FC) $(FFLAGS) -c initialize.f90
trustregion.o: trustregion.f90
	$(FC) $(FFLAGS) -c trustregion.f90
vlagbeta.o: vlagbeta.f90
	$(FC) $(FFLAGS) -c vlagbeta.f90
geometry.o: geometry.f90
	$(FC) $(FFLAGS) -c geometry.f90
shiftbase.o: shiftbase.f90
	$(FC) $(FFLAGS) -c shiftbase.f90
update.o: update.f90
	$(FC) $(FFLAGS) -c update.f90
newuob.o: newuob.f90
	$(FC) $(FFLAGS) -c newuob.f90
newuoa.o: newuoa.f90
	$(FC) $(FFLAGS) -c newuoa.f90 

clean:
	rm -f *.o example
